{"version":3,"sources":["utils/API.js","components/Container/index.js","components/Card/index.js","components/SearchForm/index.js","components/Search/index.js","components/Footer/index.js","components/Header/index.js","App.js","index.js"],"names":["axios","get","Container","props","className","style","children","Card","onClick","sortField","results","map","result","src","picture","medium","alt","name","first","last","phone","location","street","number","city","state","cell","Search","search","employees","filtered","error","sortDir","handleInputChange","event","filter","target","value","toLowerCase","filteredList","item","indexOf","toString","setState","field","sortList","sort","a","b","localeCompare","API","then","res","data","catch","err","console","log","minHeight","SearchForm","this","Component","Footer","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9568535.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the employees\n\nexport default {\n\n  getEmployees: function() {\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n  }\n};\n","import React from \"react\";\n\nfunction Container(props) {\n  return (\n    <div className=\"row justify-content-center\">\n    <div className=\"col-10 text-center\">\n      <div style={props.style}>{props.children}</div>      \n    </div>\n    </div>\n  );\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div>\n        <table className=\"table table-curved table-responsive\">\n          <thead>\n            <tr>\n              <th className=\"alignCenter\">Pic</th>\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"first\")}>First Name</span></th>\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"last\")}>Last Name</span></th>\n              {/* <th className=\"alignCenter\"><span onClick={() => props.sortField(\"email\")}>Email</span></th> */}\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"phone\")}>Phone</span></th>\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"street\")}>Street</span></th>\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"city\")}>City</span></th>\n              <th className=\"alignCenter\"><span onClick={() => props.sortField(\"state\")}>State</span></th>\n            </tr>\n          </thead>\n          <tbody >\n          {props.results.map(result => (\n            <tr key={result.cell}>\n              <td className=\"align-middle text-center\"><img src={result.picture.medium} alt=\"employee pic\"/></td>\n              <td className=\"align-middle text-center\"><p>{result.name.first}</p></td>\n              <td className=\"align-middle text-center\"><p>{result.name.last}</p></td>\n              {/* <td className=\"align-middle text-center\"><p>{result.email}</p></td> */}\n              <td className=\"align-middle text-center\"><p>{result.phone}</p></td>\n              <td className=\"align-middle text-center\"><p>{result.location.street.number} {result.location.street.name}</p></td>              \n              <td className=\"align-middle text-center\"><p>{result.location.city}</p></td>\n              <td className=\"align-middle text-center\"><p>{result.location.state}</p></td>\n            </tr>\n\n          ))}\n          </tbody>\n        </table>\n    </div>\n  )\n}\nexport default Card;\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport Container from \"../Container\";\nimport SearchForm from \"../SearchForm\";\nimport Card from \"../Card\";\n\n// set up stateful values\nclass Search extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filtered: [],\n    error: \"\",\n    sortDir: \"asc\"\n  };\n\n  // When the component mounts, get a list of all available employees and update this.state.employees and also this.state.filtered\n  componentDidMount() {\n    // call getEmployees to return the random list of employees\n    API.getEmployees()\n      .then(res => {\n        // store returned list into state variable of employees (this will be static)\n        this.setState({ employees: res.data.results})\n        // also store returned list into state variable of filtered  (this will change over time)\n        this.setState({ filtered: res.data.results})\n      })\n      .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n\n    // check if a search term exists within input form field\n    if(event) {\n      var filter = (event.target.value).toLowerCase();\n\n      const filteredList = this.state.employees.filter(item => {\n        // check search string exists within any of the fields and return the array value if a match\n        return (item.name.first.toLowerCase().indexOf(filter) !== -1)\n            || (item.name.last.toLowerCase().indexOf(filter) !== -1)\n            || (item.phone.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.street.number.toString().indexOf(filter) !== -1)\n            || (item.location.street.name.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.city.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.state.toLowerCase().indexOf(filter) !== -1);\n      });\n\n      // set filtered array state to be the new filtered list\n      this.setState({filtered: filteredList});\n      //      console.log(this.state.filtered);\n    }\n    else {\n      // since no search term, need to restore filtered list back to original full employee list\n      this.setState({filtered: this.state.employees});\n    }\n  };\n\n  // function to sort table of employees by selected column heading name\n  sortField = (field) => {\n    var sortList;\n    // check if sorting by first or last name\n    if((field === \"first\") || (field ===\"last\")) {\n      // check if ascending sortDir state\n      if(this.state.sortDir === \"asc\") {\n      // perform sort - need this because first/last is buried below \"name\" not at root\n      sortList = this.state.filtered.sort((a, b) => {\n        return a.name[field].localeCompare(b.name[field])\n      })\n      // change sortDir state to descending\n      this.setState({sortDir: \"desc\"});\n      }\n      else {\n      // perform sort - need this because first/last is buried below \"name\" not at root\n      sortList = this.state.filtered.sort((a, b) => {\n        return b.name[field].localeCompare(a.name[field])\n      })\n      // change sortDir state to ascending\n      this.setState({sortDir: \"asc\"});\n      }\n\n    }\n    // check if sorting by street\n    else if((field === \"street\")) {\n      // check if ascending sortDir state\n      if(this.state.sortDir === \"asc\") {\n        // perform sort - need this because name are buried below location & street not at root\n        sortList = this.state.filtered.sort((a, b) => {\n          return a.location[field].name.localeCompare(b.location[field].name)\n        })\n        // change sortDir state to descending\n        this.setState({sortDir: \"desc\"});\n      }\n      else {\n        // perform sort - need this because name is buried below location & street not at root\n        sortList = this.state.filtered.sort((a, b) => {\n          return b.location[field].name.localeCompare(a.location[field].name)\n        })\n        // change sortDir state to ascending\n        this.setState({sortDir: \"asc\"});\n      }\n    }\n    // check if city or state for sorting\n    else if((field === \"city\") || (field === \"state\")) {\n      // check if sorting ascending\n      if(this.state.sortDir === \"asc\") {\n        // perform sort - need this because city/state are buried below location not at root\n        sortList = this.state.filtered.sort((a,b) => {\n          return a.location[field].localeCompare(b.location[field])\n        })\n        // change sortDir to descending\n        this.setState({sortDir: \"desc\"});\n      }\n      else {\n        // perform sort - need this because city/state are buried below location not at root\n        sortList = this.state.filtered.sort((a, b) => {\n          return b.location[field].localeCompare(a.location[field]);\n        });\n        // change sortDir to ascending\n        this.setState({sortDir: \"asc\"});\n      }\n    }\n    else {\n      // check if ascending sortDir state\n      if(this.state.sortDir === \"asc\") {\n      // use filtered list of employees to sort on\n      sortList = this.state.filtered.sort((a, b) => {\n        // compare the values of each array record for sorting based upon field name passed in\n        return a[field].localeCompare(b[field])\n      })\n      // change sortDir state to descending\n      this.setState({sortDir: \"desc\"});\n      }\n      else {\n      // use filtered list of employees to sort on\n      sortList = this.state.filtered.sort((a, b) => {\n        // compare the values of each array record for sorting based upon field name passed in\n        return b[field].localeCompare(a[field])\n      })\n      // change sortDir state to ascending\n      this.setState({sortDir: \"asc\"});\n      }\n\n    }\n    // update the state variable filtered with new sorted list\n    this.setState({filtered: sortList});\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Container style={{ minHeight: \"80%\" }}>\n          <SearchForm\n            handleInputChange={this.handleInputChange}\n          />\n          <Card\n            sortField = {this.sortField} \n            results={this.state.filtered} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport Container from \"../Container\";\nimport SearchForm from \"../SearchForm\";\nimport Card from \"../Card\";\n\n// set up stateful values\nclass Search extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filtered: [],\n    error: \"\",\n    sortDir: \"asc\"\n  };\n\n  // When the component mounts, get a list of all available employees and update this.state.employees and also this.state.filtered\n  componentDidMount() {\n    // call getEmployees to return the random list of employees\n    API.getEmployees()\n      .then(res => {\n        // store returned list into state variable of employees (this will be static)\n        this.setState({ employees: res.data.results})\n        // also store returned list into state variable of filtered  (this will change over time)\n        this.setState({ filtered: res.data.results})\n      })\n      .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n\n    // check if a search term exists within input form field\n    if(event) {\n      var filter = (event.target.value).toLowerCase();\n\n      const filteredList = this.state.employees.filter(item => {\n        // check search string exists within any of the fields and return the array value if a match\n        return (item.name.first.toLowerCase().indexOf(filter) !== -1)\n            || (item.name.last.toLowerCase().indexOf(filter) !== -1)\n            || (item.phone.toLowerCase().indexOf(filter) !== -1)\n            // || (item.email.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.street.number.toString().indexOf(filter) !== -1)\n            || (item.location.street.name.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.city.toLowerCase().indexOf(filter) !== -1)\n            || (item.location.state.toLowerCase().indexOf(filter) !== -1);\n      });\n\n      // set filtered array state to be the new filtered list\n      this.setState({filtered: filteredList});\n      //      console.log(this.state.filtered);\n    }\n    else {\n      // since no search term, need to restore filtered list back to original full employee list\n      this.setState({filtered: this.state.employees});\n    }\n  };\n\n  // function to sort table of employees by selected column heading name\n  sortField = (field) => {\n    var sortList;\n    // check if sorting by first or last name\n    if((field === \"first\") || (field ===\"last\")) {\n      // check if ascending sortDir state\n      if(this.state.sortDir === \"asc\") {\n      // perform sort - need this because first/last is buried below \"name\" not at root\n      sortList = this.state.filtered.sort((a, b) => {\n        return a.name[field].localeCompare(b.name[field])\n      })\n      // change sortDir state to descending\n      this.setState({sortDir: \"desc\"});\n      }\n      else {\n      // perform sort - need this because first/last is buried below \"name\" not at root\n      sortList = this.state.filtered.sort((a, b) => {\n        return b.name[field].localeCompare(a.name[field])\n      })\n      // change sortDir state to ascending\n      this.setState({sortDir: \"asc\"});\n      }\n\n    }\n    else if((field === \"street\")) {\n      if(this.state.sortDir === \"asc\") {\n        sortList = this.state.filtered.sort((a, b) => {\n          return a.location[field].name.localeCompare(b.location[field].name)\n        })\n        this.setState({sortDir: \"desc\"});\n      }\n      else {\n        sortList = this.state.filtered.sort((a, b) => {\n          return b.location[field].name.localeCompare(a.location[field].name)\n        })\n        this.setState({sortDir: \"asc\"});\n      }\n    }\n    else if((field === \"city\") || (field === \"state\")) {\n      if(this.state.sortDir === \"asc\") {\n        sortList = this.state.filtered.sort((a,b) => {\n          return a.location[field].localeCompare(b.location[field])\n        })\n        this.setState({sortDir: \"desc\"});\n      }\n      else {\n        sortList = this.state.filtered.sort((a, b) => {\n          return b.location[field].localeCompare(a.location[field]);\n        });\n        this.setState({sortDir: \"asc\"});\n      }\n    }\n    else {\n      // check if ascending sortDir state\n      if(this.state.sortDir === \"asc\") {\n      // use filtered list of employees to sort on\n      sortList = this.state.filtered.sort((a, b) => {\n        // compare the values of each array record for sorting based upon field name passed in\n        return a[field].localeCompare(b[field])\n      })\n      // change sortDir state to descending\n      this.setState({sortDir: \"desc\"});\n      }\n      else {\n      // use filtered list of employees to sort on\n      sortList = this.state.filtered.sort((a, b) => {\n        // compare the values of each array record for sorting based upon field name passed in\n        return b[field].localeCompare(a[field])\n      })\n      // change sortDir state to ascending\n      this.setState({sortDir: \"asc\"});\n      }\n\n    }\n    // update the state variable filtered with new sorted list\n    this.setState({filtered: sortList});\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Container style={{ minHeight: \"80%\" }}>\n          <SearchForm\n            handleInputChange={this.handleInputChange}\n          />\n          <Card\n            sortField = {this.sortField} \n            results={this.state.filtered} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Search;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <div className=\"container\">\n        <div className=\"fixed-bottom\">\n           <div className=\"row\">\n               <div className=\"col\">\n                    <footer className=\"myFooter brand text-left\">\n                       &copy; John Toth 2021\n                    </footer>\n               </div>\n           </div>\n       </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n        <h1>Employee Directory</h1>\r\n        <br></br>\r\n        <p className=\"lead\">Enter search term to filter list of employees.   Click on column names to sort the employee list.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n      <div>\n        <Header />\n        <Search />\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}